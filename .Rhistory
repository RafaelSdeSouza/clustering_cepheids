LK2(1,1)
x1 <- x2 <- seq(0.001, 50, by = 0.1)
f <- outer(x1,x2,LK2 )
persp3D(x1, x2, f, theta = 50, phi = 20)
f
outer(x1,x2,LK2 )
x1
x2
x1 <- x2 <- seq(0.001, 20, by = 0.1)
f <- outer(x1,x2,LK2 )
LK2
LK2
LK2 <- function(x1,x2) {likelihood(c(0.0912,x1,x2))}
x1 <- x2 <- seq(0.001, 20, by = 0.1)
f <- outer(x1,x2,LK2 )
outer(x1,x2, LK2 )
LK2(1,1)
LK2(1,2)
persp3D(x1, x2, f, theta = 50, phi = 2
persp3D(x1, x2, f, theta = 50, phi = 20)
persp3D(x1, x2, f, theta = 50, phi = 20)
expand.grid(x1,x2)
LK2(expand.grid(x1,x2))
xy <- expand.grid(x1,x2)
xy[,1]
LK2(xy[,1],xy[,2])
LK2(xy[,1],xy[,2])
xy[,1]
sapply(LK2,xy)
sapply(xy,LK2)
sapply(LK2,xy)
LK2 <- function(x1,x2) {return(
likelihood(c(0.0912,x1,x2)))
}
sapply(xy,LK2)
xy <- expand.grid(x1=x1,x1=x2)
sapply(xy,LK2)
xy
sapply(xy$x1,xy$x1,LK2)
sapply(xy$x1,xy$x2,LK2)
require(GA)
SF<- function(x1, x2){
sfactorTdn(ER=0.0912,gi=x1,gf=x2)
}
x <- runif(100, 0.01, 0.3)
erry<- runif( 100, 0.01, 0.1)
y <- rnorm( 100, sfactorTdn(x,  0.0912, 2.93 , 0.0794), erry^2)
likelihood <- function(param){
"Likelihood function"
er = param[1]
gi = param[2]
gf = param[3]
LL = sum(((y - sfactorTdn(x,er,gi,gf))^2)/erry^2)
return(-log(LL))
}
LK2 <- function(x1,x2) {return(
likelihood(c(0.0912,x1,x2)))
}
xy <- expand.grid(x1=x1,x1=x2)
sapply(xy$x1,xy$x2,LK2)
x1 <- x2 <- seq(0.001, 20, by = 0.1)
slopevalues <- function(y){return(likelihood(c(0.0912,x1,x2)))}
slopevalues
x1
x2
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues
xy
xy <- expand.grid(x1=x1,x1=x2)
sapply(xy ,slopevalues)
sapply(c(x1,x2),slopevalues)
apply(c(x1,x2),slopevalues)
apply(xy,slopevalues)
apply(xy,1,slopevalues)
xy <- expand.grid(x1=x1,x2=x2)
apply(xy,2,slopevalues)
apply(xy,1,slopevalues)
x
xy <- expand.grid(x1=x1,x2=x2)
xy
apply(xy,1,slopevalues)
xy1
xy
xy[1,]
apply(xy,2,slopevalues)
slopevalues(xy)
slopevalues(xy[1,])
slopevalues(xy[,1],xy[,1])
slopevalues(xy[1,1],xy[1,1])
slopevalues(1,1)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues(1,1)
y
require(nuclear)
y <- rnorm( 100, sfactorTdn(x,  0.0912, 2.93 , 0.0794), erry^2)
likelihood <- function(param){
"Likelihood function"
er = param[1]
gi = param[2]
gf = param[3]
LL = sum(((y - sfactorTdn(x,er,gi,gf))^2)/erry^2)
return(-log(LL))
}
LK2 <- function(x1,x2) {return(
likelihood(c(0.0912,x1,x2)))
}
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues(1,1)
slopevalues(xy[,1],xy[,2])
slopevalues(xy)
apply(xy,2,slopevalues)
xy
as.data.frame(xy)
xy <- as.data.frame(xy)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
apply(xy,2,slopevalues)
Vectorize(slopevalues)
slopevalues <- Vectorize(slopevalues)
slopevalues(xy)
slopevalues
slopevalues(xy$x1,xy$x2)
f <- slopevalues(xy$x1,xy$x2)
persp3D(x1, x2, f, theta = 50, phi = 20)
persp3D(xy, f, theta = 50, phi = 20)
f
200*200
xy
persp3D(xy$x1,xy$x2, f, theta = 50, phi = 20)
xy$x1
xy$x2
z <- outer(x1, x2, slopevalues)
persp3D(x, y, z, theta = 50, phi = 20)
persp3D(x1, x2, z, theta = 50, phi = 20)
persp3D(x1, x2, z, theta = 50, phi = 30)
persp3D(x1, x2, z, theta = 80, phi = 30)
persp3D(x1, x2, z, theta = 80, phi = 20)
x1 <- x2 <- seq(0.001, 5, by = 0.1)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 80, phi = 20)
persp3D(x1, x2, z, theta = 60, phi = 20)
persp3D(x1, x2, z, theta = 60, phi = 60)
persp3D(x1, x2, z, theta = 60, phi = 25)
persp3D(x1, x2, z, theta = 160, phi = 25)
persp3D(x1, x2, z, theta = 140, phi = 25)
persp3D(x1, x2, z, theta = 120, phi = 25)
persp3D(x1, x2, z, theta = 110, phi = 25)
persp3D(x1, x2, z, theta = 90, phi = 25)
persp3D(x1, x2, z, theta = 100, phi = 25)
persp3D(x1, x2, z, theta = 100, phi = 35)
persp3D(x1, x2, z, theta = 100, phi = 15)
x1 <- x2 <- seq(0.001, 2, by = 0.01)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 100, phi = 15)
x1 <-  seq(0.001, 3.5, by = 0.01)
x2 <-  seq(0.001, 1, by = 0.01)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 100, phi = 15)
x1 <-  seq(0.001, 3.5, by = 0.01)
x2 <-  seq(0.001, 0.2, by = 0.01)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 100, phi = 15)
persp3D(x1, x2, z, theta = 60, phi = 15)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
summary(GA)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001), max = c(5, 5),
popSize = 50, maxiter = 100)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001), max = c(5, 5),
popSize = 50, maxiter = 100)
summary(GA)
plot(GA)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001), max = c(5, 5),
popSize = 50, maxiter = 500)
summary(GA)
summary(GA)
plot(GA)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.0001, 0.0001), max = c(10, 10),
popSize = 100, maxiter = 1000)
summary(GA)
plot(GA)
summary(GA)
plot(GA)
filled.contour(x1, x2, z, color.palette = jet.colors)
filled.contour(x1, x2, z, color.palette = terrain.colors)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 200)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100,key.axes=F)
levelplot(z~x1*x2, grid, cuts = 100)
require(lattice)
levelplot(z~x1*x2, grid, cuts = 100)
levelplot(z~x1*x2,  cuts = 100)
levelplot(z~x1*x2,  cuts = 100,color.palette = terrain.colors)
levelplot(z~x1*x2,  cuts = 100,color.palette = terrain.colors,region = TRUE)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100)
filled.contour(x1, x2, z,nlevels = 100)
library(RColorBrewer)
darkcols <- brewer.pal(8, "Dark2")
filled.contour(x1, x2, z,color.palette=darkcols, nlevels = 100)
filled.contour(x1, x2, z, color.palette = darkcols ,nlevels = 100)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100)
terrain.colors
filled.contour(x1, x2, z, color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')),nlevels = 100)
15*30
15*40
14+24
38*10
2*3/2+1
1+1
2*3
exp(0.1)
log(1.10\)
log(1.10)
0.1*1e6
1e5/1e3
500000/43
c_dat <- read.table("blg_met_rrl.dat",header = T)
setwd("~/Documents/GitHub/clustering_cepheids")
c_dat <- read.table("blg_met_rrl.dat",header = T)
c_dat
head(c_dat)
head(c_dat)
x <- log(c_dat$Period)
y <- c_dat$R21
z <- c_dat$X.Fe.H.
library(plotly)
plot_ly(x = x, y = y, z = z,type = "scatter3d", mode = "markers") %>%
layout(scene = list(
xaxis = list(title = "Log(P)"),
yaxis = list(title = "R21"),
zaxis = list(title = "[Fe/H]")))
install.packages("plotly")
library(plotly)
plot_ly(x = x, y = y, z = z,type = "scatter3d", mode = "markers") %>%
layout(scene = list(
xaxis = list(title = "Log(P)"),
yaxis = list(title = "R21"),
zaxis = list(title = "[Fe/H]")))
require(mclust)
CLUST <- Mclust(x,y,z,G = 5,initialization=list(size=1000),
modelName = "VVV")
sdat <- data.frame(x,y,z)
CLUST <- Mclust(sdat,G = 5,initialization=list(size=1000),
modelName = "VVV")
CLUST
ellips <- ellipse3d(CLUST$parameters$variance$sigma[,,1],
centre = c(CLUST$parameters$mean[1,1], CLUST$parameters$mean[2,1], CLUST$parameters$mean[3,1]), level = 0.95)
ellips2 <- ellipse3d(CLUST$parameters$variance$sigma[,,2],
centre = c(CLUST$parameters$mean[1,2], CLUST$parameters$mean[2,2], CLUST$parameters$mean[3,2]), level = 0.95)
ellips3 <- ellipse3d(CLUST$parameters$variance$sigma[,,3],
centre = c(CLUST$parameters$mean[1,3], CLUST$parameters$mean[2,3], CLUST$parameters$mean[3,3]), level = 0.95)
ellips4 <- ellipse3d(CLUST$parameters$variance$sigma[,,4],
centre = c(CLUST$parameters$mean[1,4], CLUST$parameters$mean[2,4], CLUST$parameters$mean[3,4]), level = 0.95)
ellips5 <- ellipse3d(CLUST$parameters$variance$sigma[,,5],
centre = c(CLUST$parameters$mean[1,5], CLUST$parameters$mean[2,5], CLUST$parameters$mean[3,5]), level = 0.95)
source("gg_ellipse.R")
ellips <- ellipse3d(CLUST$parameters$variance$sigma[,,1],
centre = c(CLUST$parameters$mean[1,1], CLUST$parameters$mean[2,1], CLUST$parameters$mean[3,1]), level = 0.95)
ellips2 <- ellipse3d(CLUST$parameters$variance$sigma[,,2],
centre = c(CLUST$parameters$mean[1,2], CLUST$parameters$mean[2,2], CLUST$parameters$mean[3,2]), level = 0.95)
ellips3 <- ellipse3d(CLUST$parameters$variance$sigma[,,3],
centre = c(CLUST$parameters$mean[1,3], CLUST$parameters$mean[2,3], CLUST$parameters$mean[3,3]), level = 0.95)
ellips4 <- ellipse3d(CLUST$parameters$variance$sigma[,,4],
centre = c(CLUST$parameters$mean[1,4], CLUST$parameters$mean[2,4], CLUST$parameters$mean[3,4]), level = 0.95)
ellips5 <- ellipse3d(CLUST$parameters$variance$sigma[,,5],
centre = c(CLUST$parameters$mean[1,5], CLUST$parameters$mean[2,5], CLUST$parameters$mean[3,5]), level = 0.95)
require(rgl)
install.packages("rgl")
require(rgl)
ellips <- ellipse3d(CLUST$parameters$variance$sigma[,,1],
centre = c(CLUST$parameters$mean[1,1], CLUST$parameters$mean[2,1], CLUST$parameters$mean[3,1]), level = 0.95)
ellips2 <- ellipse3d(CLUST$parameters$variance$sigma[,,2],
centre = c(CLUST$parameters$mean[1,2], CLUST$parameters$mean[2,2], CLUST$parameters$mean[3,2]), level = 0.95)
ellips3 <- ellipse3d(CLUST$parameters$variance$sigma[,,3],
centre = c(CLUST$parameters$mean[1,3], CLUST$parameters$mean[2,3], CLUST$parameters$mean[3,3]), level = 0.95)
ellips4 <- ellipse3d(CLUST$parameters$variance$sigma[,,4],
centre = c(CLUST$parameters$mean[1,4], CLUST$parameters$mean[2,4], CLUST$parameters$mean[3,4]), level = 0.95)
ellips5 <- ellipse3d(CLUST$parameters$variance$sigma[,,5],
centre = c(CLUST$parameters$mean[1,5], CLUST$parameters$mean[2,5], CLUST$parameters$mean[3,5]), level = 0.95)
index <- sample(seq_len(nrow(sdat)),replace=F, size = 5000)
xx <-  sdat[index,1]
yy <-  sdat[index,2]
zz <-  sdat[index,3]
## Some configuration parameters:
fig.width       <- 1000
fig.height      <- 1000
def.font.size   <- 1.5
label.font.size <- 2
grid.lwd        <- 3
mypal = c("cyan3" ,"magenta","orange","green2","brown")
group.col <- mypal
source("rgl_add_axes.R")
plot3d(xx,yy, zz,  box = F,
type ="p", size=0.01,alpha=0.1,xlab = "EWHa", ylab = "LogNII_Ha",
zlab = "LogOIII_Hb",col="gray90",cex=2)
index <- sample(seq_len(nrow(sdat)),replace=F, size = 20000)
xx <-  sdat[index,1]
yy <-  sdat[index,2]
zz <-  sdat[index,3]
## Some configuration parameters:
fig.width       <- 1000
fig.height      <- 1000
def.font.size   <- 1.5
label.font.size <- 2
grid.lwd        <- 3
#mypal = pal_npg("nrc", alpha = 0.7)(4)
mypal = c("cyan3" ,"magenta","orange","green2","brown")
group.col <- mypal
source("rgl_add_axes.R")
plot3d(xx,yy, zz,  box = F,
type ="p", size=0.01,alpha=0.1,xlab = "EWHa", ylab = "LogNII_Ha",
zlab = "LogOIII_Hb",col="gray90",cex=2)
plot3d(xx,yy, zz,  box = F,
type ="p", size=0.1,alpha=0.1,xlab = "EWHa", ylab = "LogNII_Ha",
zlab = "LogOIII_Hb",col="gray90",cex=2)
plot3d(xx,yy, zz,  box = F,
type ="p", size=1,alpha=0.6,xlab = "EWHa", ylab = "LogNII_Ha",
zlab = "LogOIII_Hb",col="gray90",cex=2)
plot3d(ellips, col = mypal[1], alpha = 0.95, type = "wire",add = TRUE)
plot3d(ellips2, col = mypal[2], alpha = 0.95, add = T, type = "wire")
plot3d(ellips3, col = mypal[3], alpha = 0.95, add = T, type = "wire")
plot3d(ellips4, col = mypal[4], alpha = 0.95, add = TRUE, type = "wire")
plot3d(ellips5, col = mypal[5], alpha = 0.95, add = TRUE, type = "wire")
aspect3d(1,1,1)
plot3d(xx,yy, zz,  box = F,
type ="p", size=1,alpha=0.6,xlab = "Log(P)", ylab = "R21",
zlab = "[Fe/H]",col="gray90",cex=2)
#plot3d(x,y, z,  box = F,
#              type ="p", size=0.01,alpha=0.1,xlab = "x", ylab = "y",
#              zlab = "z",col="gray90",cex=2)
# Add bounding box decoration
#rgl.bbox(color=c("gray90","black"),  shininess=3, alpha=0.8, nticks = 3 )
#rgl_add_axes(x, y, z, show.bbox = FALSE)
plot3d(ellips, col = mypal[1], alpha = 0.95, type = "wire",add = TRUE)
plot3d(ellips2, col = mypal[2], alpha = 0.95, add = T, type = "wire")
plot3d(ellips3, col = mypal[3], alpha = 0.95, add = T, type = "wire")
plot3d(ellips4, col = mypal[4], alpha = 0.95, add = TRUE, type = "wire")
plot3d(ellips5, col = mypal[5], alpha = 0.95, add = TRUE, type = "wire")
aspect3d(1,1,1)
## Add the grid
grid3d(side = c('x+','y+','z-'), lwd=grid.lwd)
plot3d(xx,yy, zz,  box = F,
type ="p", size=1,alpha=0.6,xlab = "Log(P)", ylab = "R21",
zlab = "[Fe/H]",col="gray90",cex=2)
#plot3d(x,y, z,  box = F,
#              type ="p", size=0.01,alpha=0.1,xlab = "x", ylab = "y",
#              zlab = "z",col="gray90",cex=2)
# Add bounding box decoration
#rgl.bbox(color=c("gray90","black"),  shininess=3, alpha=0.8, nticks = 3 )
#rgl_add_axes(x, y, z, show.bbox = FALSE)
plot3d(ellips, col = mypal[1], alpha = 0.95, type = "wire",add = TRUE)
plot3d(ellips2, col = mypal[2], alpha = 0.95, add = T, type = "wire")
plot3d(ellips3, col = mypal[3], alpha = 0.95, add = T, type = "wire")
plot3d(ellips4, col = mypal[4], alpha = 0.95, add = TRUE, type = "wire")
plot3d(ellips5, col = mypal[5], alpha = 0.95, add = TRUE, type = "wire")
aspect3d(1,1,1)
## Add the grid
grid3d(side = c('x+','y+','z-'), lwd=grid.lwd)
plot3d(xx,yy, zz,  box = F,
type ="p", size=1,alpha=1,xlab = "Log(P)", ylab = "R21",
zlab = "[Fe/H]",col="gray15",cex=2)
#plot3d(x,y, z,  box = F,
#              type ="p", size=0.01,alpha=0.1,xlab = "x", ylab = "y",
#              zlab = "z",col="gray90",cex=2)
# Add bounding box decoration
#rgl.bbox(color=c("gray90","black"),  shininess=3, alpha=0.8, nticks = 3 )
#rgl_add_axes(x, y, z, show.bbox = FALSE)
plot3d(ellips, col = mypal[1], alpha = 0.95, type = "wire",add = TRUE)
plot3d(ellips2, col = mypal[2], alpha = 0.95, add = T, type = "wire")
plot3d(ellips3, col = mypal[3], alpha = 0.95, add = T, type = "wire")
plot3d(ellips4, col = mypal[4], alpha = 0.95, add = TRUE, type = "wire")
plot3d(ellips5, col = mypal[5], alpha = 0.95, add = TRUE, type = "wire")
aspect3d(1,1,1)
## Add the grid
grid3d(side = c('x+','y+','z-'), lwd=grid.lwd)
plot_ly(x = x, y = y, z = z,color  = as.factor(CLUST$classification),type = "scatter3d", mode = "markers") %>%
layout(scene = list(
xaxis = list(title = "Log(P)"),
yaxis = list(title = "R21"),
zaxis = list(title = "[Fe/H]")))
plot3d(xx,yy, zz,  box = F,
type ="p", size=1,alpha=1,xlab = "Log(P)", ylab = "R21",
zlab = "[Fe/H]",col="gray15",cex=2)
#plot3d(x,y, z,  box = F,
#              type ="p", size=0.01,alpha=0.1,xlab = "x", ylab = "y",
#              zlab = "z",col="gray90",cex=2)
# Add bounding box decoration
#rgl.bbox(color=c("gray90","black"),  shininess=3, alpha=0.8, nticks = 3 )
#rgl_add_axes(x, y, z, show.bbox = FALSE)
plot3d(ellips, col = mypal[1], alpha = 0.95, type = "wire",add = TRUE)
plot3d(ellips2, col = mypal[2], alpha = 0.95, add = T, type = "wire")
plot3d(ellips3, col = mypal[3], alpha = 0.95, add = T, type = "wire")
plot3d(ellips4, col = mypal[4], alpha = 0.95, add = TRUE, type = "wire")
plot3d(ellips5, col = mypal[5], alpha = 0.95, add = TRUE, type = "wire")
aspect3d(1,1,1)
## Add the grid
grid3d(side = c('x+','y+','z-'), lwd=grid.lwd)
CLUST
plot(CLUST)
plot3d(xx,yy, zz,  box = F,
type ="p", size=1,alpha=1,xlab = "Log(P)", ylab = "R21",
zlab = "[Fe/H]",col="gray15",cex=2)
#plot3d(x,y, z,  box = F,
#              type ="p", size=0.01,alpha=0.1,xlab = "x", ylab = "y",
#              zlab = "z",col="gray90",cex=2)
# Add bounding box decoration
#rgl.bbox(color=c("gray90","black"),  shininess=3, alpha=0.8, nticks = 3 )
#rgl_add_axes(x, y, z, show.bbox = FALSE)
plot3d(ellips, col = mypal[1], alpha = 0.95, type = "wire",add = TRUE)
plot3d(ellips2, col = mypal[2], alpha = 0.95, add = T, type = "wire")
plot3d(ellips3, col = mypal[3], alpha = 0.95, add = T, type = "wire")
plot3d(ellips4, col = mypal[4], alpha = 0.95, add = TRUE, type = "wire")
plot3d(ellips5, col = mypal[5], alpha = 0.95, add = TRUE, type = "wire")
aspect3d(1,1,1)
## Add the grid
grid3d(side = c('x+','y+','z-'), lwd=grid.lwd)
library(rgl)
demo(hist3d)
open3d()
plot3d( cube3d(col = "green") )
M <- par3d("userMatrix")
if (!rgl.useNULL())
play3d( par3dinterp(time = (0:2)*0.75, userMatrix = list(M,
rotate3d(M, pi/2, 1, 0, 0),
rotate3d(M, pi/2, 0, 1, 0) ) ),
duration = 3 )
# }
# NOT RUN {
movie3d( spin3d(), duration = 5 )
hist(z )
range(z)
z
y
x
x <- log(c_dat$Period)
y <- c_dat$R21
z <- c_dat$X.Fe.H.
x
y
z
hist(z)
hist(x)
hist(y)
require(mclust)
source("gg_ellipse.R")
require(rgl)
c_dat <- read.table("blg_met_rrl.dat",header = T)
head(c_dat)
x <- log(c_dat$Period)
y <- c_dat$R21
z <- c_dat$X.Fe.H.
index <- sample(1:nrow(sdat), 2000,replace=F)
sdat <- data.frame(x,y,z)
sample(1:nrow(sdat), 2000,replace=F)
sdat <- data.frame(x,y,z)
index <- sample(1:nrow(sdat), 2000,replace=F)
CLUST <- Mclust(sdat[index,],G = 5,initialization=list(size=1000),
modelName = "VVV")
require(dbscan)
install.packages("dbscan")
cl <- hdbscan(sdat[index,],minPts=100)
require(dbscan)
cl <- hdbscan(sdat[index,],minPts=100)
plot(cl)
sdat[index,]
hdbscan(sdat[index,],minPts=100)
cl <- hdbscan(sdat[index,],minPts=10)
cl
plot(cl)
cl$cluster
library(plotly)
plot_ly(x = x, y = y, z = z,color  = as.factor(cl$cluster),type = "scatter3d", mode = "markers") %>%
layout(scene = list(
xaxis = list(title = "Log(P)"),
yaxis = list(title = "R21"),
zaxis = list(title = "[Fe/H]")))
cl <- hdbscan(sdat,minPts=10)
plot_ly(x = x, y = y, z = z,color  = as.factor(cl$cluster),type = "scatter3d", mode = "markers") %>%
layout(scene = list(
xaxis = list(title = "Log(P)"),
yaxis = list(title = "R21"),
zaxis = list(title = "[Fe/H]")))
as.factor(cl$cluster)
cl
cl <- hdbscan(sdat,minPts=5)
cl
plot_ly(x = x, y = y, z = z,color  = as.factor(cl$cluster),type = "scatter3d", mode = "markers") %>%
layout(scene = list(
xaxis = list(title = "Log(P)"),
yaxis = list(title = "R21"),
zaxis = list(title = "[Fe/H]")))
