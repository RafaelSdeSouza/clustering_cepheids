param = prior.prec.u,
initial = log(prec.u),
fixed = FALSE
),
prec.x = list(
prior = "loggamma",
param = prior.prec.x,
initial = log(prec.x),
fixed = FALSE
),
mean.x = list(
prior = "gaussian",
initial = 0,
fixed=TRUE
)
))
fit = inla(formula, data = data.frame(y, w, s),
family = "gaussian",verbose=T,
control.family = list(
hyper = list(
prec = list(param = prior.prec.y,
fixed = FALSE
)
) ),
control.predictor = list(compute=TRUE)
)
d$predicted <- fit$summary.linear.predictor$mean
ggplot(d, aes(x = x, y = y)) +
geom_segment(aes(xend = x, yend = predicted)) +
geom_point(color="purple",size=2) +
geom_line(aes(x=x,y=predicted))+
theme(panel.background = element_rect(color = "black", fill = "gray85") )
d$predicted <- fit$summary.fitted.values$mean
ggplot(d, aes(x = x, y = y)) +
geom_segment(aes(xend = x, yend = predicted)) +
geom_point(color="purple",size=2) +
geom_line(aes(x=x,y=predicted))+
theme(panel.background = element_rect(color = "black", fill = "gray85") )
ggplot(d, aes(x = x, y = y)) +
#  geom_segment(aes(xend = x, yend = predicted)) +
geom_point(color="purple",size=2) +
geom_line(aes(x=x,y=predicted))+
theme(panel.background = element_rect(color = "black", fill = "gray85") )
library("nuclear", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
SF<- function(x1, x2, x3)
sfactorTdn(x1,x2,x3,6,4)
}
SF<- function(x1, x2, x3){
sfactorTdn(x1,x2,x3,6,4)
}
SF<- function(x1, x2, x3){
sfactorTdn(x1,x2,x3,6,4)
}
x2 <- x3 <- seq(0, 100, by = 0.1)
f <- outer(x2, x3, SF, x1= 0.0912)
SF<- function(x1, x2, x3){
sfactorTdn(x1,x2,x3)
}
x2 <- x3 <- seq(0, 100, by = 0.1)
f <- outer(x2, x3, SF, x1= 0.0912)
persp3D(x2, x3, f, theta = 50, phi = 20)
f
f(x2,x3)
outer(x2, x3, SF, x1= 0.0912)
x2 <- x3 <- seq(0.001, 100, by = 0.1)
f <- outer(x2, x3, SF, x1= 0.0912)
x1<-x2 <- x3 <- seq(0.001, 50, by = 0.1)
f <- outer(x1,x2, x3, SF)
SF<- function(x1, x2){
sfactorTdn(0.0912,x1,x2)
}
x1<-x2 <- seq(0.001, 50, by = 0.1)
f <- outer(x1,x2, SF)
SF<- function(x1, x2){
sfactorTdn(0.0912,gi=x1,gf=x2)
}
x1<-x2 <- seq(0.001, 50, by = 0.1)
f <- outer(x1,x2, SF)
SF<- function(x1, x2){
sfactorTdn(ER=0.0912,gi=x1,gf=x2)
}
x1<-x2 <- seq(0.001, 50, by = 0.1)
f <- outer(x1,x2, SF)
likelihood <- function(param){
"Likelihood function"
er = param[1]
gi = param[2]
gf = param[3]
LL = sum(((y - sfactorTdn(x,er,gi,gf))^2)/erry^2)
return(-log(LL))
}
x <- runif(100, 0.01, 0.3)
errobsy1 <- runif(N, 0.01, 0.1)
y <- rnorm( 100, sfactorTdn(x,  0.0912, 2.93 , 0.0794), errobsy1^2)
x <- runif(100, 0.01, 0.3)
errobsy1 <- runif( 100, 0.01, 0.1)
y <- rnorm( 100, sfactorTdn(x,  0.0912, 2.93 , 0.0794), errobsy1^2)
y
x
likelihood <- function(param){
"Likelihood function"
er = param[1]
gi = param[2]
gf = param[3]
LL = sum(((y - sfactorTdn(x,er,gi,gf))^2)/erry^2)
return(-log(LL))
}
likelihood(0.1,0.1,0.1)
likelihood(c(0.1,0.1,0.1))
erry<- runif( 100, 0.01, 0.1)
y <- rnorm( 100, sfactorTdn(x,  0.0912, 2.93 , 0.0794), erry^2)
likelihood <- function(param){
"Likelihood function"
er = param[1]
gi = param[2]
gf = param[3]
LL = sum(((y - sfactorTdn(x,er,gi,gf))^2)/erry^2)
return(-log(LL))
}
likelihood(c(0.1,0.1,0.1))
LK2 <- function(x1,x2) {likelihood(c(0.0912,x1,x2))}
LK2(1,1)
x1 <- x2 <- seq(0.001, 50, by = 0.1)
f <- outer(x1,x2,LK2 )
persp3D(x1, x2, f, theta = 50, phi = 20)
f
outer(x1,x2,LK2 )
x1
x2
x1 <- x2 <- seq(0.001, 20, by = 0.1)
f <- outer(x1,x2,LK2 )
LK2
LK2
LK2 <- function(x1,x2) {likelihood(c(0.0912,x1,x2))}
x1 <- x2 <- seq(0.001, 20, by = 0.1)
f <- outer(x1,x2,LK2 )
outer(x1,x2, LK2 )
LK2(1,1)
LK2(1,2)
persp3D(x1, x2, f, theta = 50, phi = 2
persp3D(x1, x2, f, theta = 50, phi = 20)
persp3D(x1, x2, f, theta = 50, phi = 20)
expand.grid(x1,x2)
LK2(expand.grid(x1,x2))
xy <- expand.grid(x1,x2)
xy[,1]
LK2(xy[,1],xy[,2])
LK2(xy[,1],xy[,2])
xy[,1]
sapply(LK2,xy)
sapply(xy,LK2)
sapply(LK2,xy)
LK2 <- function(x1,x2) {return(
likelihood(c(0.0912,x1,x2)))
}
sapply(xy,LK2)
xy <- expand.grid(x1=x1,x1=x2)
sapply(xy,LK2)
xy
sapply(xy$x1,xy$x1,LK2)
sapply(xy$x1,xy$x2,LK2)
require(GA)
SF<- function(x1, x2){
sfactorTdn(ER=0.0912,gi=x1,gf=x2)
}
x <- runif(100, 0.01, 0.3)
erry<- runif( 100, 0.01, 0.1)
y <- rnorm( 100, sfactorTdn(x,  0.0912, 2.93 , 0.0794), erry^2)
likelihood <- function(param){
"Likelihood function"
er = param[1]
gi = param[2]
gf = param[3]
LL = sum(((y - sfactorTdn(x,er,gi,gf))^2)/erry^2)
return(-log(LL))
}
LK2 <- function(x1,x2) {return(
likelihood(c(0.0912,x1,x2)))
}
xy <- expand.grid(x1=x1,x1=x2)
sapply(xy$x1,xy$x2,LK2)
x1 <- x2 <- seq(0.001, 20, by = 0.1)
slopevalues <- function(y){return(likelihood(c(0.0912,x1,x2)))}
slopevalues
x1
x2
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues
xy
xy <- expand.grid(x1=x1,x1=x2)
sapply(xy ,slopevalues)
sapply(c(x1,x2),slopevalues)
apply(c(x1,x2),slopevalues)
apply(xy,slopevalues)
apply(xy,1,slopevalues)
xy <- expand.grid(x1=x1,x2=x2)
apply(xy,2,slopevalues)
apply(xy,1,slopevalues)
x
xy <- expand.grid(x1=x1,x2=x2)
xy
apply(xy,1,slopevalues)
xy1
xy
xy[1,]
apply(xy,2,slopevalues)
slopevalues(xy)
slopevalues(xy[1,])
slopevalues(xy[,1],xy[,1])
slopevalues(xy[1,1],xy[1,1])
slopevalues(1,1)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues(1,1)
y
require(nuclear)
y <- rnorm( 100, sfactorTdn(x,  0.0912, 2.93 , 0.0794), erry^2)
likelihood <- function(param){
"Likelihood function"
er = param[1]
gi = param[2]
gf = param[3]
LL = sum(((y - sfactorTdn(x,er,gi,gf))^2)/erry^2)
return(-log(LL))
}
LK2 <- function(x1,x2) {return(
likelihood(c(0.0912,x1,x2)))
}
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues(1,1)
slopevalues(xy[,1],xy[,2])
slopevalues(xy)
apply(xy,2,slopevalues)
xy
as.data.frame(xy)
xy <- as.data.frame(xy)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
apply(xy,2,slopevalues)
Vectorize(slopevalues)
slopevalues <- Vectorize(slopevalues)
slopevalues(xy)
slopevalues
slopevalues(xy$x1,xy$x2)
f <- slopevalues(xy$x1,xy$x2)
persp3D(x1, x2, f, theta = 50, phi = 20)
persp3D(xy, f, theta = 50, phi = 20)
f
200*200
xy
persp3D(xy$x1,xy$x2, f, theta = 50, phi = 20)
xy$x1
xy$x2
z <- outer(x1, x2, slopevalues)
persp3D(x, y, z, theta = 50, phi = 20)
persp3D(x1, x2, z, theta = 50, phi = 20)
persp3D(x1, x2, z, theta = 50, phi = 30)
persp3D(x1, x2, z, theta = 80, phi = 30)
persp3D(x1, x2, z, theta = 80, phi = 20)
x1 <- x2 <- seq(0.001, 5, by = 0.1)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 80, phi = 20)
persp3D(x1, x2, z, theta = 60, phi = 20)
persp3D(x1, x2, z, theta = 60, phi = 60)
persp3D(x1, x2, z, theta = 60, phi = 25)
persp3D(x1, x2, z, theta = 160, phi = 25)
persp3D(x1, x2, z, theta = 140, phi = 25)
persp3D(x1, x2, z, theta = 120, phi = 25)
persp3D(x1, x2, z, theta = 110, phi = 25)
persp3D(x1, x2, z, theta = 90, phi = 25)
persp3D(x1, x2, z, theta = 100, phi = 25)
persp3D(x1, x2, z, theta = 100, phi = 35)
persp3D(x1, x2, z, theta = 100, phi = 15)
x1 <- x2 <- seq(0.001, 2, by = 0.01)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 100, phi = 15)
x1 <-  seq(0.001, 3.5, by = 0.01)
x2 <-  seq(0.001, 1, by = 0.01)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 100, phi = 15)
x1 <-  seq(0.001, 3.5, by = 0.01)
x2 <-  seq(0.001, 0.2, by = 0.01)
slopevalues <- function(x1,x2){return(likelihood(c(0.0912,x1,x2)))}
slopevalues <- Vectorize(slopevalues)
z <- outer(x1, x2, slopevalues)
persp3D(x1, x2, z, theta = 100, phi = 15)
persp3D(x1, x2, z, theta = 60, phi = 15)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
summary(GA)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001, max = c(5, 5),
popSize = 50, maxiter = 100)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001), max = c(5, 5),
popSize = 50, maxiter = 100)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001), max = c(5, 5),
popSize = 50, maxiter = 100)
summary(GA)
plot(GA)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.001, 0.001), max = c(5, 5),
popSize = 50, maxiter = 500)
summary(GA)
summary(GA)
plot(GA)
GA <- ga(type = "real-valued", fitness =  function(x) -slopevalues(x[1],x[2]),
min = c(0.0001, 0.0001), max = c(10, 10),
popSize = 100, maxiter = 1000)
summary(GA)
plot(GA)
summary(GA)
plot(GA)
filled.contour(x1, x2, z, color.palette = jet.colors)
filled.contour(x1, x2, z, color.palette = terrain.colors)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 200)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100,key.axes=F)
levelplot(z~x1*x2, grid, cuts = 100)
require(lattice)
levelplot(z~x1*x2, grid, cuts = 100)
levelplot(z~x1*x2,  cuts = 100)
levelplot(z~x1*x2,  cuts = 100,color.palette = terrain.colors)
levelplot(z~x1*x2,  cuts = 100,color.palette = terrain.colors,region = TRUE)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100)
filled.contour(x1, x2, z,nlevels = 100)
library(RColorBrewer)
darkcols <- brewer.pal(8, "Dark2")
filled.contour(x1, x2, z,color.palette=darkcols, nlevels = 100)
filled.contour(x1, x2, z, color.palette = darkcols ,nlevels = 100)
filled.contour(x1, x2, z, color.palette = terrain.colors,nlevels = 100)
terrain.colors
filled.contour(x1, x2, z, color.palette=colorRampPalette(c('white','blue','yellow','red','darkred')),nlevels = 100)
15*30
15*40
14+24
38*10
2*3/2+1
1+1
2*3
exp(0.1)
log(1.10\)
log(1.10)
0.1*1e6
1e5/1e3
500000/43
setwd("~/Documents/GitHub/clustering_cepheids")
require(mclust)
require(dbscan)
source("gg_ellipse.R")
require(rgl)
c_dat <- read.table("blg_met_rrl.dat",header = T)
head(c_dat)
x <- log(c_dat$Period)
y <- c_dat$R21
z <- c_dat$X.Fe.H.
plot3d(x,y, z,  box = F,
type ="p", size=0.01,alpha=0.1,xlab = "EWHa", ylab = "LogNII_Ha",
zlab = "LogOIII_Hb",col="gray90",cex=2)
sdat <- data.frame(x,y,z)
index <- sample(1:nrow(sdat), 2000,replace=F)
cl <- hdbscan(sdat,minPts=5)
CLUST <- Mclust(sdat[index,],G = 5,initialization=list(size=1000),
modelName = "VVV")
plot_ly(x = x, y = y, z = z,color  = as.factor(cl$cluster),type = "scatter3d", mode = "markers") %>%
layout(scene = list(
xaxis = list(title = "Log(P)"),
yaxis = list(title = "R21"),
zaxis = list(title = "[Fe/H]")))
library(plotly)
plot_ly(x = x, y = y, z = z,color  = as.factor(cl$cluster),type = "scatter3d", mode = "markers") %>%
layout(scene = list(
xaxis = list(title = "Log(P)"),
yaxis = list(title = "R21"),
zaxis = list(title = "[Fe/H]")))
sdat
sdat <- scale(sdat )
sdat
pca(sdat)
PCA1=prcomp(sdat)
PCA1
PCA1$rotation
PCA1$rotation[1,]
PCA1$rotation[1,]
sdat
sdat[]
sdat[1,]
sdat[1]
sdat[[]]
sdat <- data.frame(x,y,z)
scale(sdat)
sdat <- scale(sdat)
sdat
as.matrix(sdat)
as.numeric(sdat)
as.data.frame(sdat)
sdat <- as.data.frame(scale(sdat))
PCA1=prcomp(sdat)
PCA1$rotation[1,]
PCA1$rotation[,1]
PCA1$rotation
x
PCA1$rotation
PCA1$x
PCA1$x[,1]
plot(PCA1$x[,1],PCA1$x[,2])
plot(x,y)
pcdat <- data.frame(PCA1$x[,1],PCA1$x[,2],PCA1$x[,3])
pcdat
index <- sample(1:nrow(pcdat), 2000,replace=F)
cl <- hdbscan(pcdat,minPts=5)
CLUST <- Mclust(sdat[index,],G = 5,initialization=list(size=1000),
modelName = "VVV")
CLUST
plot(CLUST)
CLUST <- Mclust(pcdat[index,],G = 5,initialization=list(size=1000),
modelName = "VVV")
plot(CLUST)
plot_ly(x = x, y = y, z = z,color  = as.factor(cl$cluster),type = "scatter3d", mode = "markers") %>%
layout(scene = list(
xaxis = list(title = "Log(P)"),
yaxis = list(title = "R21"),
zaxis = list(title = "[Fe/H]")))
cl$cluster
plot(CLUST)
install.packages(“Rtsne”)
install.packages(Rtsne)
install.packages("Rtsne")
tsne <- Rtsne(sdat, dims = 2, perplexity=30, verbose=TRUE, max_iter = 500)
sdat <- data.frame(x,y,z)
sdat <- as.data.frame(scale(sdat))
index <- sample(1:nrow(sdat ), 2000,replace=F)
tsne <- Rtsne(sdat[index,], dims = 2, perplexity=30, verbose=TRUE, max_iter = 500)
library(Rtsne)
tsne <- Rtsne(sdat[index,], dims = 2, perplexity=30, verbose=TRUE, max_iter = 500)
plot(tsne$Y, t='n', main="tsne")
plot(tsne, t='n', main="tsne")
tsne
plot(tsne$Y)
cl <- hdbscan(tsne$Y,minPts=5)
plot_ly(x = x, y = y, z = z,color  = as.factor(cl$cluster),type = "scatter3d", mode = "markers") %>%
layout(scene = list(
xaxis = list(title = "Log(P)"),
yaxis = list(title = "R21"),
zaxis = list(title = "[Fe/H]")))
cl
CLUST <- Mclust(tsne$Y,G = 5,initialization=list(size=1000),
modelName = "VVV")
plot(CLUST)
CLUST
CLUST <- Mclust(tsne$Y,G = 10,initialization=list(size=1000),
modelName = "VVV")
CLUST
plot(CLUST)
CLUST <- Mclust(tsne$Y,G = 5,initialization=list(size=1000),
modelName = "VVV")
plot(CLUST)
index <- sample(1:nrow(sdat ), 5000,replace=F)
tsne <- Rtsne(sdat[index,], dims = 3, perplexity=30, verbose=TRUE, max_iter = 500)
plot(tsne$Y)
CLUST <- Mclust(tsne$Y,G = 5,initialization=list(size=1000),
modelName = "VVV")
plot_ly(x = x, y = y, z = z,color  = as.factor(cl$cluster),type = "scatter3d", mode = "markers") %>%
layout(scene = list(
xaxis = list(title = "Log(P)"),
yaxis = list(title = "R21"),
zaxis = list(title = "[Fe/H]")))
plot(CLUST,type=2)
plot(CLUST)
plot(tsne$Y)
tsne$Y
tsne <- Rtsne(sdat[index,], dims = 2 perplexity=30, verbose=TRUE, max_iter = 500)
plot(tsne$Y)
tsne <- Rtsne(sdat[index,], dims = 2, perplexity=30, verbose=TRUE, max_iter = 500)
plot(tsne$Y)
CLUST <- Mclust(tsne$Y,G = 5,initialization=list(size=1000),
modelName = "VVV")
plot(CLUST)
hist(tsne$Y[,1])
density(tsne$Y[,1])
plot(density(tsne$Y[,1]))
tsne <- Rtsne(sdat[index,], dims = 2, perplexity=50, verbose=TRUE, max_iter = 500)
plot(tsne$Y)
CLUST <- Mclust(tsne$Y,G = 5,initialization=list(size=1000),
modelName = "VVV")
plot(CLUST)
tsne$Y
cor(cbind(tsne$Y,sdat[index,]))
tsne <- Rtsne(sdat[index,], dims = 2, perplexity=50, verbose=TRUE, max_iter = 1000)
plot(tsne$Y)
tsne <- Rtsne(sdat[index,], dims = 2, perplexity=50, verbose=TRUE, max_iter = 10000)
plot(tsne$Y)
CLUST <- Mclust(tsne$Y,G = 5,initialization=list(size=1000),
modelName = "VVV")
plot(CLUST)
12*10
14*12
168/954
168/(12*954)
14/954
